* req-package

** Description

   req-package is a macro wrapper on top of [[https://github.com/jwiegley/use-package][use-package]].
   It's goal is to simplify package dependencies management,
   when using use-package for your .emacs.

** Usage

   Load req-package:

   #+BEGIN_SRC emacs-lisp
(require 'req-package)
   #+END_SRC

   Define required packages with dependencies using =:require= like this:

   #+BEGIN_SRC emacs-lisp
   (req-package dired) ;; you can omit this empty requirement because of dired-single

   (req-package dired-single
     :require dired
     :config (...))

   (req-package lua-mode
     :config (...))

   (req-package flymake)

   (req-package flymake-lua
     :require (flymake lua-mode)
     :config (...))
   #+END_SRC

   To start loading packages in right order:

   #+BEGIN_SRC emacs-lisp
   (req-package-finish)
   #+END_SRC

** El Get

   There is another benefit over use-package - =el-get= support.
   No more thinking about sources for your packages.
   Just install and configure your el-get.
   Here is example:

   #+BEGIN_SRC emacs-lisp
    (require 'req-package'')

    (req-package-force el-get
      :init (progn (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get/el-get/recipes")
                   (el-get 'sync)))

    (req-package gotham-theme
      :config (print "gotham theme is here and installed from el-get"))

    (req-package-finish)
   #+END_SRC

   Also, of course, there could be dependencies between el-get and elpa packages

** More?

   You can always extend list of package providers or change priorities if you want.
   in which your packages are being installed.
   It can be done by customizing =req-package-providers= list.
   It's list of functions, which can install packages.

   Here are some rules for one such function:

- check package presence at corresponding repo
- check whether it installed or not
- install that package if it is available and not installed
- return nonnil only if package is installed already or
  successfully installed by this function"

** Migrate from use-package

   Just replace all =(use-package ...)= with =(req-package [:require DEPS] ...)= and add =(req-package-finish)= at the end of your configuration file.

** Note

   All use-package parameters are supported, see use-package manual
   for additional info.

   However, there is no need for the =:ensure= keyword; req-package will add it automatically if needed.

   Also there is a =req-package-force= function which simulates plain old use-package behavior

   More complex req-package usage example can be found at http://github.com/edvorg/emacs-configs.

** Contribute

   Please, commit and pull-request your changes to =develop= branch.
   Master is used for automatic repo package builds by melpa's travis-ci.

** Things to be done

*** TODO take package dependencies from it's meta data

*** DONE el-get support
    CLOSED: [2014-11-04 Tue 17:49]
    - CLOSING NOTE [2014-11-04 Tue 17:49] \\
      seems done and working

*** DONE use single documentation of package (DRY)
    CLOSED: [2014-11-04 Tue 18:41]
    - CLOSING NOTE [2014-11-04 Tue 18:41] \\
      regenerated documentation

*** DONE fix issue with elpa packages installation
    CLOSED: [2014-11-05 Wed 00:15]
    - CLOSING NOTE [2014-11-05 Wed 00:15] \\
      fixed. all packages are installing in req-package-finish loop

    elpa packages remain uninstalled until loaded by use-package
    it will be better to install them all at bootstrap launch

*** DONE el-get/elpa priority customization
    CLOSED: [2014-11-05 Wed 00:50]
    - CLOSING NOTE [2014-11-05 Wed 00:50] \\
      fixed. can be done by =req-package-providers= list reordering

    some users may needs customization for package sources
    if some package is present at both elpa and el-get
    we need options to choose where to get packages from

*** DONE custom software sources
    CLOSED: [2014-11-05 Wed 00:50]
    - CLOSING NOTE [2014-11-05 Wed 00:50] \\
      fixed. can be done by adding new function to =req-package-providers=

    alongside with elpa and el-get support it will be useful to add your own software sources
    For example - simple wget-based url loader:

    #+BEGIN_SRC emacs-lisp
    (add-recipe 'test-package "https://raw.githubusercontent.com/edvorg/req-package/master/req-package.el")
    (req-package test-package)
    #+END_SRC

*** TODO el-get/elpa packages must be in priority over builtin ones

** Changelog

*** v0.8

    - bugfixes

*** v0.7

    - fixed some issues with packages installation. all packages will be installed at bootstrap time
    - custom package providers support by =req-package-providers=
    - priority feature for cross provider packages loading. you can choose, what to try first - elpa, el-get, or something else

*** v0.6

    - =el-get= support

*** v0.5

    - Major system refactoring.
    - Fixed bugs with defered loading.
    - Significant performance optimization.
    - =max-specpdl-size=, =max-lisp-eval-depth= issues completely solved.
    - Flexible =:require= keyword parsing.

*** v0.4.2

    - Bug fixes.

*** v0.4.1

    - Various tweaks and bug fixes.

*** v0.4-all-cycles

    - All cycles of your dependencies will be printed now.
    - Also there are more handy log messages and some bug fixes.

*** v0.3-cycles

    - There are nice error messages about cycled dependencies now.
    - Cycles printed in a way: =pkg1 -> [pkg2 -> ...] pkg1=.
    - It means there is a cycle around =pkg1=.

*** v0.2-auto-fetch

    - There is no need of explicit =:ensure= in your code now.
    - When you req-package it adds =:ensure= if package is available in your repos.
    - Also package deps =:ensure='d automatically too.
    - Just write =(req-package pkg1 :require pkg2)= and all you need will be installed.
